package com.txh.im.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.txh.im.bean.UpdateAddressBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPDATE_ADDRESS_BEAN".
*/
public class UpdateAddressBeanDao extends AbstractDao<UpdateAddressBean, Void> {

    public static final String TABLENAME = "UPDATE_ADDRESS_BEAN";

    /**
     * Properties of entity UpdateAddressBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AddressId = new Property(0, String.class, "AddressId", false, "ADDRESS_ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Phone = new Property(2, String.class, "Phone", false, "PHONE");
        public final static Property ProvinceCityZoneText = new Property(3, String.class, "ProvinceCityZoneText", false, "PROVINCE_CITY_ZONE_TEXT");
        public final static Property ProvinceCityZoneName = new Property(4, String.class, "ProvinceCityZoneName", false, "PROVINCE_CITY_ZONE_NAME");
        public final static Property ProvinceCityZoneValue = new Property(5, String.class, "ProvinceCityZoneValue", false, "PROVINCE_CITY_ZONE_VALUE");
        public final static Property ReceiveAddress = new Property(6, String.class, "ReceiveAddress", false, "RECEIVE_ADDRESS");
        public final static Property IsDefault = new Property(7, String.class, "IsDefault", false, "IS_DEFAULT");
    }


    public UpdateAddressBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UpdateAddressBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPDATE_ADDRESS_BEAN\" (" + //
                "\"ADDRESS_ID\" TEXT," + // 0: AddressId
                "\"NAME\" TEXT," + // 1: Name
                "\"PHONE\" TEXT," + // 2: Phone
                "\"PROVINCE_CITY_ZONE_TEXT\" TEXT," + // 3: ProvinceCityZoneText
                "\"PROVINCE_CITY_ZONE_NAME\" TEXT," + // 4: ProvinceCityZoneName
                "\"PROVINCE_CITY_ZONE_VALUE\" TEXT," + // 5: ProvinceCityZoneValue
                "\"RECEIVE_ADDRESS\" TEXT," + // 6: ReceiveAddress
                "\"IS_DEFAULT\" TEXT);"); // 7: IsDefault
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPDATE_ADDRESS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UpdateAddressBean entity) {
        stmt.clearBindings();
 
        String AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindString(1, AddressId);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(3, Phone);
        }
 
        String ProvinceCityZoneText = entity.getProvinceCityZoneText();
        if (ProvinceCityZoneText != null) {
            stmt.bindString(4, ProvinceCityZoneText);
        }
 
        String ProvinceCityZoneName = entity.getProvinceCityZoneName();
        if (ProvinceCityZoneName != null) {
            stmt.bindString(5, ProvinceCityZoneName);
        }
 
        String ProvinceCityZoneValue = entity.getProvinceCityZoneValue();
        if (ProvinceCityZoneValue != null) {
            stmt.bindString(6, ProvinceCityZoneValue);
        }
 
        String ReceiveAddress = entity.getReceiveAddress();
        if (ReceiveAddress != null) {
            stmt.bindString(7, ReceiveAddress);
        }
 
        String IsDefault = entity.getIsDefault();
        if (IsDefault != null) {
            stmt.bindString(8, IsDefault);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UpdateAddressBean entity) {
        stmt.clearBindings();
 
        String AddressId = entity.getAddressId();
        if (AddressId != null) {
            stmt.bindString(1, AddressId);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Phone = entity.getPhone();
        if (Phone != null) {
            stmt.bindString(3, Phone);
        }
 
        String ProvinceCityZoneText = entity.getProvinceCityZoneText();
        if (ProvinceCityZoneText != null) {
            stmt.bindString(4, ProvinceCityZoneText);
        }
 
        String ProvinceCityZoneName = entity.getProvinceCityZoneName();
        if (ProvinceCityZoneName != null) {
            stmt.bindString(5, ProvinceCityZoneName);
        }
 
        String ProvinceCityZoneValue = entity.getProvinceCityZoneValue();
        if (ProvinceCityZoneValue != null) {
            stmt.bindString(6, ProvinceCityZoneValue);
        }
 
        String ReceiveAddress = entity.getReceiveAddress();
        if (ReceiveAddress != null) {
            stmt.bindString(7, ReceiveAddress);
        }
 
        String IsDefault = entity.getIsDefault();
        if (IsDefault != null) {
            stmt.bindString(8, IsDefault);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UpdateAddressBean readEntity(Cursor cursor, int offset) {
        UpdateAddressBean entity = new UpdateAddressBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // AddressId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ProvinceCityZoneText
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ProvinceCityZoneName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ProvinceCityZoneValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ReceiveAddress
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // IsDefault
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UpdateAddressBean entity, int offset) {
        entity.setAddressId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProvinceCityZoneText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProvinceCityZoneName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvinceCityZoneValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReceiveAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsDefault(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UpdateAddressBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UpdateAddressBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(UpdateAddressBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
